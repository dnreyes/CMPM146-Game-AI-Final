package com.gameai.mazegeneration.resources;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.world.World;

/*
 * Responsible for the initial shaping of an entire chunk.
 */

public abstract class ChunkGenerator {
/*
 * interface to biome data for chunk to be generated.
 */
	
	public interface BiomeGrid {
		/*
		 * Get biome at x, z within chunk being generated
		 * @param x = 0 - 15
		 * @param z = 0 - 15
		 * @return Biome value
		 */
		Biome getBiome(int x, int z);
		/*
		 * Set biome at x, z within chunk being generated
		 */
		void setBiome(int x, int z, Biome bio);
	}
	    /**
	     * Shapes the chunk for the given coordinates.
	     *
	     * @param world The world this chunk will be used for
	     * @param random The random generator to use
	     * @param x The X-coordinate of the chunk
	     * @param z The Z-coordinate of the chunk
	     * @return byte[] containing the types for each block created by this
	     *     generator
	     */
		@Deprecated
	    public byte[] generate(World world, Random random, int x, int z) {
			throw new UnsupportedOperationException("Custom generator is missing required methods: generate(), generateBlocks");
		}
	    /**
	     * Shapes the chunk for the given coordinates, with extended block IDs
	     * supported (0-4095).
	     * @param world The world this chunk will be used for
	     * @param random The random generator to use
	     * @param x The X-coordinate of the chunk
	     * @param z The Z-coordinate of the chunk
	     * @param biomes Proposed biome values for chunk - can be updated by
	     *     generator
	     * @return short[][] containing the types for each block created by this
	     *     generator
	     * @deprecated Magic value
	     */
	    @Deprecated 
	    public short[][] generateExtBlockSections (World world, Random random, int x, int z, BiomeGrid biomes) {
	        return null; // Default - returns null, which drives call to generateBlockSections()
	    }

	    /**
	     * Shapes the chunk for the given coordinates.
	     * @param world The world this chunk will be used for
	     * @param random The random generator to use
	     * @param x The X-coordinate of the chunk
	     * @param z The Z-coordinate of the chunk
	     * @param biomes Proposed biome values for chunk - can be updated by
	     *     generator
	     * @return short[][] containing the types for each block created by this
	     *     generator
	     * @deprecated Magic value
	     */
	    @Deprecated
	    public byte[][] generateBlockSections(World world, Random random, int x, int z, BiomeGrid biomes) {
	        return null; // Default - returns null, which drives call to generate()
	    }

	    /**
	     * Tests if the specified location is valid for a natural spawn position
	     *
	     * @param world The world we're testing on
	     * @param x X-coordinate of the block to test
	     * @param z Z-coordinate of the block to test
	     * @return true if the location is valid, otherwise false
	     */
	    public boolean canSpawn(World world, int x, int z) {
	        Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);

	        switch (world.getEnvironment()) {
	        case NETHER:
	            return true;
	        case THE_END:
	            return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
	        case NORMAL:
	        default:
	            return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
	        }
	    }

	    /**
	     * Gets a list of default {@link BlockPopulator}s to apply to a given
	     * world
	     *
	     * @param world World to apply to
	     * @return List containing any amount of BlockPopulators
	     */
	    public List<BlockPopulator> getDefaultPopulators(World world) {
	        return new ArrayList<BlockPopulator>();
	    }

	    /**
	     * Gets a fixed spawn location to use for a given world.
	     * <p>
	     * A null value is returned if a world should not use a fixed spawn point,
	     * and will instead attempt to find one randomly.
	     *
	     * @param world The world to locate a spawn point for
	     * @param random Random generator to use in the calculation
	     * @return Location containing a new spawn point, otherwise null
	     */
	    public Location getFixedSpawnLocation(World world, Random random) {
	        return null;
	    }
	}
}
